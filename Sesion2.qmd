---
title: "Sesión 2. Aspectos sociodemográficos"
---

## Movilidad

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(readxl)
Data20252 <- read_excel("C:/R-Proyectos/LibroAlerta1/data/Data20252.xlsx")

View(Data20252)
datos<- Data20252
attach(datos)
# head(datos)
# str(datos)
# names(datos)
```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
# Librerias necesarias
#install.packages(c("ggplot2", "psych", "skimr", "summarytools", "corrplot", "ggpubr"))
library(ggplot2)
library(psych)
library(skimr)
library(summarytools)
library(corrplot)
library(tidyr)
library(RColorBrewer)
library(ggpubr)
library(plotly)
library(lattice)
library(Hmisc)
library(skimr)
library(summarytools)
library(base)
library(ggpubr)
library(scales)
library(dplyr)
library(ggrepel)
library(tidyverse)
library(scales)
```

```{r, message=FALSE, warning=FALSE, echo=FALSE}
## Convertir las variables caracter a factor
# Lista de columnas que se convertirán en factores
cols_factor <- c(
  "tipo_doc", "genero", "depto", "ciudad", "barrio", "estrato...12",
  "colegio", "salud", "programa", "pensum", "jornada", "campus", 
  "prog_acad", "sexo_id", "pais", "est_civ", "ciu_orig", "desemp_aca", 
  "leng_ext", "cert_leng", "ingles", "frances", "portug", "aleman", 
  "italiano", "otra_leng", "matema", "comp_lec", "expr_oral", "acompa", 
  "tipo_acomp", "memoria", "comp", "adaptac", "atencion", "analisis", 
  "hab_pub", "est_orat", "expr_amig", "comp_nvos", "transp_hab", 
  "combust", "transp_comp", "comp_dispo", "tip_familia", "grupo_pobl", 
  "grupo_pert", "grupo_etn", "etnia_ind", "pago_sem", "eligio_udes", 
  "prim_univ", "niv_padre", "niv_madre", "internet", "tv_suscrip", 
  "esp_estud", "jorn_univ", "trab_padre", "trab_madre", "bienes_hog", 
  "remunera", "sit_ec_hog", "sust_psic", "tipo_psic", "ayuda_psic", 
  "tipo_ayuda", "fuma", "mot_fuma", "otra_resp", "alcohol", "mot_alc", 
  "ocas_alc", "anticoncep", "tipo_antc", "id_gen", "gen_otro", 
  "orient_sex", "otra_orsex", "enf_diag", "tipo_enf", "medic_enf", 
  "discap", "tipo_disc", "arte_atra", "hab_art", "tipo_art", 
  "aprend_art", "dia_art", "amb_prac", "act_fisica", "lectura", 
  "deporte", "tipo_dep", "otros_dep", "salud_ment", "apoyo_fam", 
  "red_apoyo", "pareja", "rel_pareja", "rel_padres", "fam_origen", 
  "fam_formada"
)

# Convertir solo las columnas que realmente existen
cols_existentes <- intersect(cols_factor, names(datos))
datos[cols_existentes] <- lapply(datos[cols_existentes], as.factor)
```

::: {.callout-warning title="Aclaración importante"}
En los gráficos y filtros, el nombre Cúcuta aparecerá como Cucuta.
:::

### Medio de transporte habitual de su casa a la universidad

::: {.callout-note title="Descripción para todos los campus"}
En términos generales, entre los estudiantes de nuevo ingreso a la UDES en los campus de Bucaramanga, Cúcuta y Valledupar, se observa que el medio de desplazamiento más habitual es el **transporte público** (29.8%), seguido por la **motocicleta** (26%). El **automóvil propio** representa el 17.7%, mientras que **desplazarse a pie** lo realiza el 12.8% de los estudiantes. Un 12.3% opta por transporte solicitado a través de **plataformas digitales**. Los porcentajes restantes se distribuyen entre otros medios de transporte (1.03%) y **bicicleta** (0.238%).
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Medio de transporte habitual de su casa a la universidad
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(transp_hab), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, transp_hab) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(transp_hab)) %>%
  count(transp_hab, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~transp_hab,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+120,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del medio de transporte \nhabitual de su casa a la universidad por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Su vehículo que tipo de combustible utiliza

::: {.callout-note title="Descripción para todos los campus"}
En cuanto al tipo de combustible que emplean los vehcículos usados por los estudiantes, la **Gasolina** es empleada por el 52.7% de los usuarios. Otros combustibles como el **Diése**l (2.38%), **Híbrido** (0.792%) y Eléctrico 100% (0.158%). Esta distribución es coherente con las tendencias nacionales donde la electrificación del parque automotor está en sus etapas iniciales. Sin embargo, un considerable 44% de los encuestados declara **"No tengo transporte propio"**.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y tipo de combustible utiliza
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(combust), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, combust) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(combust)) %>%
  count(combust, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~combust,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del tipo de combustible \npor campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Comparte con otras personas durante el trayecto su medio de transporte habitual

::: {.callout-note title="Descripción para todos los campus"}
Entre los estudiantes que sí poseen vehículo, la mayoría (31.3%) No comparte su transporte, mientras que un 24.9% Sí lo hace; mientras que un 43.8% indican que "No tengo transporte propio", reiterando la proporción de estudiantes que se movilizan de otras maneras. Lo anterior sugiere una oportunidad para fomentar el ***carpooling*** y otras iniciativas de movilidad compartida, que podrían disminuir la congestión y reducir la huella de carbono.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Comparte con otras personas durante el trayecto su medio de transporte habitual
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(transp_comp), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, transp_comp) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(transp_comp)) %>%
  count(transp_comp, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~transp_comp,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de comparte transporte \npor campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Estaría dispuesto a compartir su medio de transporte?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la disposición a compartir su medio de transporte, se observa que, el 42.6% de los estudiantes afirma que **Sí** estaría dispuesto a compartir su vehículo. Un 12.1% se muestra reacio.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Estaría dispuesto a compartir su medio de transporte?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(comp_dispo), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, comp_dispo) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(comp_dispo)) %>%
  count(comp_dispo, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~comp_dispo,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución dispuesto a compartir \nsu medio de transporte por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

### Tiempo en promedio en desplazamiento de su casa a la universidad

::: {.callout-note title="Descripción para todos los campus"}
El 55.2% de los encuestados reporta invertir entre 10 y 30 minutos en su desplazamiento. En contraste, solo un 24.6% de los participantes gasta menos de 10 minutos. Un 15.5% pasa entre 30 y 60 minutos en el camino, mientras que un 4.6% más de 60 minutos.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y tiempo de transporte
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(tiemp_trans), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, tiemp_trans) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(tiemp_trans)) %>%
  count(tiemp_trans, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~tiemp_trans,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tiempo promedio de desplazamiento \n(en minutos) por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Dinero en transporte, en promedio, semanal en desplazamiento

::: {.callout-note title="Descripción para todos los campus"}
El 21% de los estudiantes **no gasta nada** en transpote para llegar a la UDES. Minetras que el 17.4%, reporta gastos semanales de **más de \$50.000**. El 15.1% invierten **entre \$10.000 y \$20.000** semanalmente. Aproximadamente 12.5% gastan **entre \$30.000 y \$40.000**, mientras que cerca del 11.7% destinan **entre \$20.000 y \$30.000**. Finalmente, un grupo de alrededor del 11.6% de los encuestados reporta gastos semanales **entre \$5.000 y \$10.000**, y un número similar, aproximadamente del 10.6%, gasta **entre \$40.000 y \$50.000**.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y Dinero en transporte, en promedio, semanal en desplazamiento
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(din_trans) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, din_trans) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(din_trans)) %>%
  count(din_trans, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'din_trans' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(din_trans)

datos_final <- datos_final %>%
  mutate(din_trans = factor(din_trans, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", din_trans, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~din_trans,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución gastos semanales \nen desplazamiento por campus",
    xaxis = list(title = "Gastos semanales por desplazamiento"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig
```

## Familia cercana

### ¿Cuál es la tipologia familiar de origen?

::: {.callout-note title="Descripción para todos los campus"}
El 64,8% de los estudiantes de reién ingreso en la UDES Bucaramanga provienen de familias biparentales en su mayoria.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Cuál es la tipologia familiar de origen?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(tip_familia) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, tip_familia) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(tip_familia)) %>%
  count(tip_familia, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'tip_familia' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(tip_familia)

datos_final <- datos_final %>%
  mutate(tip_familia = factor(tip_familia, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", tip_familia, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~tip_familia,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tipologia familiar de origen \n por campus",
    xaxis = list(title = "Tipologia familiar de origen"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Con cuántas personas convive?

::: {.callout-note title="Descripción para todos los campus"}
El tamaño de las familias, el 57.2% de los estudiantes pertenecen a núcleos familiares de 3 a 4 personas, seguido por hogares de 1 a 2 personas (19.7%).
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Cuál es la tipologia familiar de origen?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(convive) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, convive) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(convive)) %>%
  count(convive, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'convive' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(convive)

datos_final <- datos_final %>%
  mutate(convive = factor(convive, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", convive, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~convive,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución con cuántas personas \nconvive actualmente por campus",
    xaxis = list(title = "Con cuántas personas convive"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### En cuántos cuartos duermen las personas de su hogar

::: {.callout-note title="Descripción para todos los campus"}
En cuanto al tamaño de las viviendas, el 46.7% de los estudiantes reside en casas con 3 habitaciones, mientras que el 25.5% habita en inmuebles con 2 habitaciones. Por otro lado, el 15.1% vive en propiedades con 4 habitaciones.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y En cuántos cuartos duermen las personas de su hogar
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(cuartos) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, cuartos) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(cuartos)) %>%
  count(cuartos, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'cuartos' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(cuartos)

datos_final <- datos_final %>%
  mutate(cuartos = factor(cuartos, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", cuartos, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~cuartos,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución con cuántas personas \nconvive actualmente por campus",
    xaxis = list(title = "COn cuántas personas convive"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Tiene hijos?

::: {.callout-note title="Descripción para todos los campus"}
En relación con la paternidad, el 97.1% de los estudiantes manifestaron no tener hijo, mientras que el 2,9% sí tienen.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Tiene hijos?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(tiene_hijos), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, tiene_hijos) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(tiene_hijos)) %>%
  count(tiene_hijos, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~tiene_hijos,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 90,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución tiene hijos\n por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuántos hijos tiene?

::: {.callout-note title="Descripción para todos los campus"}
De aquellos estudiantes con hijos, el 56.8% tiene un hijo, el 37.8% dos hijos y restante 3 hijos o más de 4 hijos.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuántos hijos tiene?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(num_hijos), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, num_hijos) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(num_hijos)) %>%
  count(num_hijos, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~num_hijos,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 90,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución número de hijos\n por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

## Diversidad y Pertenencia a grupos poblacionales

### Grupo poblacional

::: {.callout-note title="Descripción para todos los campus"}
El 30.1% de los estudiantes se identifica con algún grupo poblacional.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Grupos poblacionales
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(grupo_pobl), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, grupo_pobl) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(grupo_pobl)) %>%
  count(grupo_pobl, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~grupo_pobl,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 90,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución grupo poblacional \n por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿A cuál de los siguientes grupos poblacionales considera usted que pertenece?

::: {.callout-note title="Descripción para todos los campus"}
De los 380 estudiantes que indicaron pertenecer a un grupo poblacional específico, la mayoría, un 20%, corresponde a la población víctima del conflicto armado (76 estudiantes). Le siguen con un 17.6%, los grupos étnicos (67 estudiantes) y el 15.5% las culturas urbanas (59 estudiantes).

Otros porcentajes significativos incluyen a la población LGBTIQ+A, que representa un 11.6% (44 estudiantes). Un 10.3% de los encuestados se identifica como población desplazada (39 estudiantes). Finalmente, la población campesina constituye un 9.5% (36 estudiantes).
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y grupo poblacional (excluyendo la categoría específica)
datos_plot <- datos %>%
  filter(
    !is.na(campus),
    !is.na(grupo_pert),
    campus %in% c("Bucaramanga", "Cucuta", "Valledupar"),
    grupo_pert != "No pertenece a ningún grupo poblacional"
  ) %>%
  group_by(campus, grupo_pert) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos" (también excluyendo la categoría)
todos <- datos %>%
  filter(
    !is.na(grupo_pert),
    grupo_pert != "No pertenece a ningún grupo poblacional"
  ) %>%
  count(grupo_pert, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de grupo_pert por frecuencia total (grupo "Todos")
niveles_grupo_pert <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(grupo_pert)

datos_final <- datos_final %>%
  mutate(grupo_pert = factor(grupo_pert, levels = niveles_grupo_pert))

# 6. Crear gráfico de barras en celeste con filtro
fig <- plot_ly(
  data = datos_final,
  x = ~grupo_pert,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de pertenencia a grupos poblacionales \npor campus (sin categoría 'No pertenece')",
    xaxis = list(title = "Grupos poblacionales", tickangle = -45),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿A cuál de los siguientes grupos étnicos pertenece?

::: {.callout-note title="Descripción para todos los campus"}
Dentro de los grupos étnicos, el 49.3% corresponde a pueblos indígenas, el 43.3% a comunidades negras afrocolombianas y el 4.48% a mestizos.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y grupos étnicos pertenecea
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(grupo_etn), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, grupo_etn) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(grupo_etn)) %>%
  count(grupo_etn, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~grupo_etn,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de grupos étnicos a los \nque pertenece por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

### Comunidad indígena a la que pertenece

::: {.callout-note title="Descripción para todos los campus"}
Entre los pueblos indígenas representados se encuentran Wayúu (42.4%), Kankuamo (33.3%), Cariachiles (6.06%), Jayariyu (6.0%), entre otros.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Comunidad indígena a la que pertenece
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(etnia_ind), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, etnia_ind) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(etnia_ind)) %>%
  count(etnia_ind, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~etnia_ind,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de Comunidad indígena \na la que pertenece por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

## Perfil económico y Académico de los padres

### ¿Quién cubre sus gastos de matrícula?

::: {.callout-note title="Descripción para todos los campus"}
La mayor parte de la responsabilidad financiera recae en los **padres** (47.5%). Aunque en menor medida, el esfuerzo individual de cada progenitor también es notable. Aquellos estudiantes cuyos gastos son cubiertos **solo por el padre** representan un grupo considerable, con aproximadamente 268 casos (21.2%). De manera similar, la dedicación de las madres es evidente, con alrededor de 159 (12.6%) estudiantes que cuentan con el apoyo financiero exclusivo de la **madre**. Más allá del núcleo parental, las **entidades financieras** apoyan a poco más de 112 estudiantes, lo que sugiere el recurso a créditos educativos. La **financiación propia** por parte del estudiante o de **otros familiares** (ambos por debajo de los 100 casos) también contribuyen, aunque de forma más limitada. Finalmente, un número mínimo de estudiantes (apenas visible en el gráfico) se beneficia de **becas**, destacando la necesidad de ampliar estas oportunidades para aliviar la carga económica.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Quién cubre sus gastos de matrícula?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(gastos_mat) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, gastos_mat) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(gastos_mat)) %>%
  count(gastos_mat, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'gastos_mat' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(gastos_mat)

datos_final <- datos_final %>%
  mutate(gastos_mat = factor(gastos_mat, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", gastos_mat, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~gastos_mat,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución gastos de matrícular \n por campus",
    xaxis = list(title = "Quién cubre los gastos de matrícula"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Cuál es la forma de pago del semestre en la Universidad?

::: {.callout-note title="Descripción para todos los campus"}
La forma de pago del semestre en el 44,5% de los estudiantes es en efectivo, el 28,4% mediante entidades financieras, el 6% con el ICETEX, entre otros medios. 
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Cuál es la forma de pago del semestre en la Universidad?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(pago_sem) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, pago_sem) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(pago_sem)) %>%
  count(pago_sem, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'pago_sem' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(pago_sem)

datos_final <- datos_final %>%
  mutate(pago_sem = factor(pago_sem, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", pago_sem, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~pago_sem,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución forma de pago del \nsemestre por campus",
    xaxis = list(title = "Forma de pago del semestre"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig
```

### Si solicitó ingreso en otras universidades, ¿por qué eligió la Universidad de Santander?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(tm)
library(SnowballC)
library(wordcloud2)
library(RColorBrewer)

# 1. Extraer y limpiar texto de la variable 'eligio_udes'
text <- datos$eligio_udes %>%
  na.omit() %>% 
  paste(collapse = " ")  # Unir todas las respuestas en un solo texto

# 2. Crear corpus
docs <- Corpus(VectorSource(text))

# 3. Limpiar texto
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
docs <- tm_map(docs, toSpace, "'")
docs <- tm_map(docs, toSpace, "`")
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("spanish"))  # Español
docs <- tm_map(docs, removeWords, c("udes", "universidad", "santander", "porque"))  # Palabras irrelevantes
docs <- tm_map(docs, stripWhitespace)
removeSpecialChars <- function(x) gsub("[^a-zA-Z0-9 ]", "", x)
docs <- tm_map(docs, content_transformer(removeSpecialChars))

# 4. Calcular frecuencia de palabras
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)

# 5. Visualizar como nube de palabras
wordcloud2(d, color = "random-light", backgroundColor = "white")

```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
# Cargar librerías necesarias
library(dplyr)
library(tm)
library(SnowballC)
library(wordcloud2)
library(RColorBrewer)

# 1. Extraer y procesar las categorías de elección
text <- datos$eligio_udes %>%
  na.omit() %>%
  # Primero limpiar y estandarizar separadores
  gsub("\\s+", " ", .) %>%  # Normalizar espacios múltiples
  # Separar por punto y coma
  strsplit(";") %>%
  unlist() %>%
  trimws() %>%  # Eliminar espacios al inicio y final
  .[. != ""] %>%  # Eliminar elementos vacíos
  paste(collapse = " ")  # Unir todas las respuestas

# 2. Crear corpus
docs <- Corpus(VectorSource(text))

# 3. Limpiar y transformar texto
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("spanish"))

# Remover solo palabras verdaderamente irrelevantes - conservando palabras clave
palabras_irrelevantes <- c("por", "porque", "la", "el", "en", "de", "para", 
                          "con", "una", "un", "es", "son", "fue", "muy", 
                          "más", "menos", "solo", "no", "mi", "los", "las", 
                          "del", "al", "se", "su", "sus", "como", "pero", 
                          "que", "le", "udes", "universidad", "santander")

docs <- tm_map(docs, removeWords, palabras_irrelevantes)
docs <- tm_map(docs, stripWhitespace)

# 4. Crear matriz de términos y calcular frecuencias
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)

# Mostrar TODAS las palabras encontradas para diagnóstico
print("TODAS las palabras encontradas:")
print(d)

# Filtrar palabras con frecuencia mínima de 1 (mostrar todas)
d <- d[d$freq >= 1, ]

# 5. Crear nube de palabras
wordcloud2(d, 
           size = 1.5,                    # Tamaño aumentado
           color = "random-dark",         # Colores oscuros para contraste
           backgroundColor = "white",     # Fondo blanco
           minRotation = 0,              # Sin rotación mínima
           maxRotation = 0,              # Sin rotación máxima (texto horizontal)
           rotateRatio = 0,              # Sin rotación
           fontFamily = "Arial",         # Fuente
           ellipticity = 0.6,            # Forma
           minSize = 10)                 # Tamaño mínimo de fuente

# Mostrar las palabras más frecuentes
print("Palabras clave de motivos de elección UDES:")
print("==============================================")
head(d, 15)

# Opcional: Crear un resumen de las categorías principales
print("\nCategorías esperadas en la nube de palabras:")
print("- referencias, positivas")
print("- carrera, preferencia") 
print("- otra")
print("- instituciones")
print("- visita, colegio")
print("- economía")
# print("- decisión, padres")
```

### Después de cuánto tiempo, de haber terminado el colegio, ingreso a la Universidad (por favor responder en semestres)

::: {.callout-note title="Descripción para todos los campus"}
La distribución del tiempo transcurrido entre el grado del colegio y el ingreso a la Universidad de Santander (UDES) por campus, se observa que la mayoría de los estudiantes (57.1%) ingresaron inmediatamente después de graduarse del colegio, lo que indica una transición directa hacia la educación superior. Un 18.5% de los estudiantes ingresó dos semestres después, lo que sugiere una pausa corta. Un 12.4% inició sus estudios entre dos y tres años después del grado. El grupo que esperó más de cuatro años para ingresar representa el 6.97%, mientras que un 4.99% lo hizo un semestre después del grado.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y Después de cuánto tiempo, de haber terminado el colegio, ingreso a la Universidad (por favor responder en semestre
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(tiempo_ing), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, tiempo_ing) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(tiempo_ing)) %>%
  count(tiempo_ing, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~tiempo_ing,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución número de semestres para \ningresar a la UDES por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig

```

### ¿Usted es el primero en su familia inmediata en asistir a la universidad?

::: {.callout-note title="Descripción para todos los campus"}
El 25.4% de los estudiantes reporta ser el primero en su familia inmediata en asistir a la universidad. Por otro lado, el 74.6% restante proviene de familias en las que ya existía experiencia previa universitaria, lo que puede influir positivamente en el acompañamiento académico y en la toma de decisiones educativas.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Usted es el primero en su familia inmediata en asistir a la universidad?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(prim_univ), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, prim_univ) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(prim_univ)) %>%
  count(prim_univ, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~prim_univ,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del primero en la familia \nen asisitir a la universidad por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuál es el nivel educativo más alto alcanzado por su padre?

::: {.callout-note title="Descripción para todos los campus"}
La mayoría de los padres de los estudiantes encuestados alcanzaron niveles de educación profesional completa (22.1%) o secundaria completa (21.3%), seguidos por educación técnica o tecnológica completa (11.9%). Un menor porcentaje reportó nivel de posgrado (7.77%), mientras que el 6.5% no sabe el nivel educativo alcanzado por su padre. Otros niveles, como primaria completa, incompleta o educación incompleta en distintos niveles, tienen una representación menor.
:::

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos por campus y ¿Cuál es el nivel educativo más alto alcanzado por su padre?
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(niv_padre), campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, niv_padre) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(niv_padre)) %>%
  count(niv_padre, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de pastel con filtro
fig <- plot_ly(
  data = datos_final,
  labels = ~niv_padre,
  values = ~n,
  type = "pie",
  textinfo = "label+percent",
  hoverinfo = "label+percent+value",
  marker = list(colors = brewer.pal(8, "Pastel1")),
  rotation = 270+45,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución nivel educativo más alto \nalcanzado por su padre por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms.0.value", c),
               label = c)
        })
      )
    )
  )

fig
```

### ¿Cuál es el nivel educativo más alto alcanzado por su madre?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

### Seleccione el estrato socioeconómico del lugar donde vive

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

## Servicios de Internet y Espacios en el hogar

### ¿Cuenta su hogar con servicio de conexión a internet?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

### ¿Cuenta su hogar con servicio de suscripción de televisión (cable, parabólica o satelital)?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

### ¿Cuántos libros físicos o electrónicos hay en su hogar excluyendo periódicos, revistas,directorios telefónicos y libros del colegio?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

### Usualmente, ¿cuánto tiempo al día dedica a leer por entretenimiento?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

### Usualmente, ¿cuánto tiempo al día dedica a navegar en internet? Excluya actividades académica

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

### ¿Dispone de un espacio privado para estudiar en casa?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

### ¿Cuánto tiempo le dedica semanalmente a su jornada de estudios en la Universidad?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```

### ¿Cuánto tiempo permanece en la Universidad?

::: {.callout-note title="Descripción para todos los campus"}
En cuanto a la .....
:::

```{r}

```
