---
title: "Campus Filtro"
---

## Distribución de Edad por Campus {.tabset}

Seleccione un campus para visualizar la distribución de edad correspondiente. El gráfico se actualiza automáticamente con base en su selección.

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(readxl)
Data20252 <- read_excel("C:/R-Proyectos/LibroAlerta1/data/Data20252.xlsx")

datos<- Data20252
attach(datos)
```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
# Cargar librerías necesarias
library(dplyr)
library(tm)
library(SnowballC)
library(wordcloud2)
library(RColorBrewer)

# 1. Extraer y procesar las categorías de elección
text <- datos$eligio_udes %>%
  na.omit() %>%
  # Primero limpiar y estandarizar separadores
  gsub("\\s+", " ", .) %>%  # Normalizar espacios múltiples
  # Separar por punto y coma
  strsplit(";") %>%
  unlist() %>%
  trimws() %>%  # Eliminar espacios al inicio y final
  .[. != ""] %>%  # Eliminar elementos vacíos
  paste(collapse = " ")  # Unir todas las respuestas

# 2. Crear corpus
docs <- Corpus(VectorSource(text))

# 3. Limpiar y transformar texto
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("spanish"))

# Remover solo palabras verdaderamente irrelevantes - conservando palabras clave
palabras_irrelevantes <- c("por", "porque", "la", "el", "en", "de", "para", 
                          "con", "una", "un", "es", "son", "fue", "muy", 
                          "más", "menos", "solo", "no", "mi", "los", "las", 
                          "del", "al", "se", "su", "sus", "como", "pero", 
                          "que", "le", "udes", "universidad", "santander")

docs <- tm_map(docs, removeWords, palabras_irrelevantes)
docs <- tm_map(docs, stripWhitespace)

# 4. Crear matriz de términos y calcular frecuencias
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)

# Mostrar TODAS las palabras encontradas para diagnóstico
print("TODAS las palabras encontradas:")
print(d)

# Filtrar palabras con frecuencia mínima de 1 (mostrar todas)
d <- d[d$freq >= 1, ]

# 5. Crear nube de palabras
wordcloud2(d, 
           size = 1.5,                    # Tamaño aumentado
           color = "random-dark",         # Colores oscuros para contraste
           backgroundColor = "white",     # Fondo blanco
           minRotation = 0,              # Sin rotación mínima
           maxRotation = 0,              # Sin rotación máxima (texto horizontal)
           rotateRatio = 0,              # Sin rotación
           fontFamily = "Arial",         # Fuente
           ellipticity = 0.6,            # Forma
           minSize = 10)                 # Tamaño mínimo de fuente

```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# Filtrar datos válidos
data_plot_drop <- datos |>
  filter(campus %in% c("Bucaramanga", "Cúcuta", "Valledupar"), !is.na(edad))

# Crear gráfico interactivo
pd <- data_plot_drop |>
  plot_ly(
    type = 'histogram',
    x = ~edad,
    autobinx = FALSE,
    xbins = list(start = 0, end = 40, size = 2),  # intervalos de 2 años hasta los 40
    marker = list(color = '#004899'),
    transforms = list(
      list(
        type = 'filter',
        target = ~campus,
        operation = '=',
        value = unique(data_plot_drop$campus)[1]  # valor inicial
      )
    )
  ) |> layout(
    title = "Distribución de la Edad por Campus",
    xaxis = list(title = "Edad"),
    yaxis = list(title = "Frecuencia"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(unique(data_plot_drop$campus), function(c) {
          list(
            method = "restyle",
            args = list("transforms[0].value", c),
            label = c
          )
        })
      )
    )
  )

pd

```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Cuál es la tipologia familiar de origen?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(horas_sem) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, horas_sem) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(horas_sem)) %>%
  count(horas_sem, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'horas_sem' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(horas_sem)

datos_final <- datos_final %>%
  mutate(horas_sem = factor(horas_sem, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", horas_sem, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~horas_sem,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución con cuántas personas \nconvive actualmente por campus",
    xaxis = list(title = "Con cuántas personas convive"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

```{r}
library(dplyr)
library(plotly)

# Preparar datos
data_plot_drop <- datos |>
  filter(campus %in% c("Bucaramanga", "Cúcuta", "Valledupar"), !is.na(edad)) |>
  mutate(campus_total = campus)  # duplicar para crear opción "Todos"

# Agregar fila con etiqueta "Todos"
data_total <- data_plot_drop |> 
  mutate(campus = "Todos")  # etiqueta adicional

# Combinar
data_all <- bind_rows(data_plot_drop, data_total)

# Lista de opciones del dropdown
campus_levels <- unique(data_all$campus)

# Crear gráfico interactivo
pd <- data_all |>
  plot_ly(
    type = 'histogram',
    x = ~edad,
    autobinx = FALSE,
    xbins = list(start = 0, end = 40, size = 2),
    marker = list(color = '#004899'),
    transforms = list(
      list(
        type = 'filter',
        target = ~campus,
        operation = '=',
        value = "Todos"  # Mostrar todos inicialmente
      )
    )
  ) |> layout(
    title = "Distribución de la Edad por Campus",
    xaxis = list(title = "Edad"),
    yaxis = list(title = "Frecuencia"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(campus_levels, function(c) {
          list(
            method = "restyle",
            args = list("transforms[0].value", c),
            label = c
          )
        })
      )
    )
  )

pdf()

```

```{r}
library(dplyr)
library(plotly)

# Preparar datos
data_plot_drop <- datos |>
  filter(campus %in% c("Bucaramanga", "Cúcuta", "Valledupar"), !is.na(edad)) |>
  mutate(campus_total = campus)  # duplicar para crear opción "Todos"

# Agregar fila con etiqueta "Todos"
data_total <- data_plot_drop |> 
  mutate(campus = "Todos")  # etiqueta adicional

# 1. Agrupar edades por intervalos
datos_plot <- datos %>%
  filter(!is.na(edad), !is.na(campus)) %>%
  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE)) %>%
  group_by(campus, grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(campus) %>%
  mutate(pct = round(100 * n / sum(n), 1)) %>%
  ungroup()


# 2. Crear gráfico con filtro interactivo
plot_ly(
  data = datos_plot,
  x = ~grupo_edad,
  y = ~pct,
  type = "bar",
  text = ~paste0(pct, "%"),
  textposition = "outside",
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = unique(datos_plot$campus)[1]
    )
  )
) %>%
  layout(
    title = "Distribución porcentual de la Edad por campus (hasta 40 años)",
    xaxis = list(title = "Edad (intervalos de 2 años)", tickangle = -45),
    yaxis = list(title = "Porcentaje (%)", ticksuffix = "%"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(unique(datos_plot$campus), function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Cuál es la tipologia familiar de origen?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(convive) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, convive) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(convive)) %>%
  count(convive, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'convive' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(convive)

datos_final <- datos_final %>%
  mutate(convive = factor(convive, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", convive, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~convive,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución con cuántas personas \nconvive actualmente por campus",
    xaxis = list(title = "Con cuántas personas convive"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig

```

```{r}
# Buscar caracteres no válidos en 'programa'
problemas <- datos %>%
  filter(!is.na(programa)) %>%
  filter(is.na(iconv(programa, from = "", to = "UTF-8")))

print(problemas$programa)

```

```{r}
library(dplyr)
library(plotly)

# 1. Agrupar por intervalos de edad y campus
datos_plot <- datos %>%
  filter(!is.na(edad), !is.na(campus), edad < 44) %>%
  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))

# 2. Datos por campus
por_campus <- datos_plot %>%
  group_by(campus, grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(campus) %>%
  mutate(pct = round(100 * n / sum(n), 1)) %>%
  ungroup()

# 3. Datos totales ("Todos")
todos <- datos_plot %>%
  group_by(grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(campus = "Todos") %>%
  mutate(pct = round(100 * n / sum(n), 1))

# 4. Combinar
datos_final <- bind_rows(por_campus, todos)

# 5. Crear gráfico interactivo con filtro
plot_ly(
  data = datos_final,
  x = ~grupo_edad,
  y = ~pct,
  type = "bar",
  text = ~paste0(pct, "%"),
  textposition = "outside",
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"  # valor por defecto
    )
  )
) %>%
  layout(
    title = "Distribución porcentual de la Edad por campus (hasta 40 años)",
    xaxis = list(title = "Edad (intervalos de 2 años)", tickangle = -45),
    yaxis = list(title = "Porcentaje", ticksuffix = "%"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(unique(datos_final$campus), function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

```

```{r}
library(dplyr)
library(plotly)

# 1. Agrupar por intervalos de edad y campus
datos_plot <- datos %>%
  filter(!is.na(edad), !is.na(campus), edad < 44) %>%
  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))

# 2. Datos por campus
por_campus <- datos_plot %>%
  group_by(campus, grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(campus) %>%
  mutate(pct = round(100 * n / sum(n), 1)) %>%
  ungroup()

# 3. Datos totales ("Todos")
todos <- datos_plot %>%
  group_by(grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(campus = "Todos") %>%
  mutate(pct = round(100 * n / sum(n), 1))

# 4. Combinar
datos_final <- bind_rows(por_campus, todos) %>%
  mutate(etiqueta = paste0("Campus: ", campus, "<br>",
                           "Edad: ", grupo_edad, "<br>",
                           "Porcentaje: ", pct, "%"))

# 5. Crear gráfico interactivo con filtro
plot_ly(
  data = datos_final,
  x = ~grupo_edad,
  y = ~pct,
  type = "bar",
  text = ~etiqueta,
  textposition = "outside",
  hoverinfo = "text",  # <<-- evita duplicados
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"  # valor por defecto
    )
  )
) %>%
  layout(
    title = "Distribución porcentual de la Edad por campus (hasta 40 años)",
    xaxis = list(title = "Edad (intervalos de 2 años)", tickangle = -45),
    yaxis = list(title = "Porcentaje", ticksuffix = "%"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(unique(datos_final$campus), function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

```

```{r}
library(dplyr)
library(plotly)

# 1. Agrupar por intervalos de edad y campus
datos_plot <- datos %>%
  filter(!is.na(edad), !is.na(campus), edad < 44) %>%
  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))

# 2. Datos por campus
por_campus <- datos_plot %>%
  group_by(campus, grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(campus) %>%
  mutate(pct = round(100 * n / sum(n), 1)) %>%
  ungroup()

# 3. Datos totales ("Todos")
todos <- datos_plot %>%
  group_by(grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(campus = "Todos") %>%
  mutate(pct = round(100 * n / sum(n), 1))

# 4. Combinar
datos_final <- bind_rows(por_campus, todos) %>%
  mutate(etiqueta = paste0("Campus: ", campus, "<br>",
                           "Edad: ", grupo_edad, "<br>",
                           "Porcentaje: ", pct, "%"))

# 5. Gráfico interactivo sin texto visible permanente
plot_ly(
  data = datos_final,
  x = ~grupo_edad,
  y = ~pct,
  type = "bar",
  text = ~etiqueta,
  hoverinfo = "text",  # Solo aparece al pasar el mouse
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución porcentual de la Edad por campus (hasta 40 años)",
    xaxis = list(title = "Edad (intervalos de 2 años)", tickangle = -45),
    yaxis = list(title = "Porcentaje", ticksuffix = "%"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(unique(datos_final$campus), function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

```

```{r}
library(dplyr)
library(plotly)

# 1. Agrupar por intervalos de edad y campus
datos_plot <- datos %>%
  filter(!is.na(edad), !is.na(campus), edad < 44) %>%
  mutate(grupo_edad = cut(edad, breaks = seq(14, 44, by = 2), right = FALSE))

# 2. Datos por campus
por_campus <- datos_plot %>%
  group_by(campus, grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(campus) %>%
  mutate(pct = round(100 * n / sum(n), 1)) %>%
  ungroup()

# 3. Datos totales ("Todos")
todos <- datos_plot %>%
  group_by(grupo_edad) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(campus = "Todos") %>%
  mutate(pct = round(100 * n / sum(n), 1))

# 4. Combinar
datos_final <- bind_rows(por_campus, todos) %>%
  mutate(hover_text = paste0(
    "Campus: ", campus, "<br>",
    "Edad: ", grupo_edad, "<br>",
    "Porcentaje: ", pct, "%"
  ))

# 5. Gráfico sin etiquetas visibles, solo en hover
plot_ly(
  data = datos_final,
  x = ~grupo_edad,
  y = ~pct,
  type = "bar",
  hovertext = ~hover_text,
  hoverinfo = "text",
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución porcentual de la Edad por campus (hasta 40 años)",
    xaxis = list(title = "Edad (intervalos de 2 años)", tickangle = -45),
    yaxis = list(title = "Porcentaje", ticksuffix = "%"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(unique(datos_final$campus), function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

```

```{r}
library(dplyr)
library(plotly)

# 1. Filtrar y agrupar por estado civil y campus
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(est_civ), campus %in% c("Bucaramanga", "Cúcuta", "Valledupar")) %>%
  group_by(campus, est_civ) %>%
  summarise(n = n(), .groups = "drop")

# 2. Datos para 'Todos'
todos <- datos %>%
  filter(!is.na(est_civ)) %>%
  group_by(est_civ) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(campus = "Todos")

# 3. Combinar
datos_final <- bind_rows(datos_plot, todos)

# 4. Crear gráfico de pastel con filtro
fig <- plot_ly(type = 'pie', hole = 0.3)  # Gráfico vacío base

# Campus únicos
campus_niveles <- unique(datos_final$campus)

# Añadir una traza por cada campus
for (i in seq_along(campus_niveles)) {
  datos_c <- datos_final %>% filter(campus == campus_niveles[i])
  fig <- fig %>% add_trace(
    labels = datos_c$est_civ,
    values = datos_c$n,
    name = campus_niveles[i],
    visible = ifelse(i == 1, TRUE, FALSE),  # Solo el primero visible
    type = "pie",
    textinfo = "percent+label",
    sort = FALSE,
    direction = "clockwise",
    rotation = 90
  )
}

# 5. Dropdown para filtros
fig <- fig %>% layout(
  title = "Distribución del estado civil por campus",
  showlegend = TRUE,
  updatemenus = list(list(
    active = 0,
    type = "dropdown",
    buttons = lapply(seq_along(campus_niveles), function(i) {
      list(
        method = "restyle",
        args = list("visible", as.list(seq_along(campus_niveles) == i)),
        label = campus_niveles[i]
      )
    })
  ))
)

fig

```

```{r}
library(dplyr)
library(plotly)

# 1. Agrupar datos por campus y estado civil
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(est_civ), campus %in% c("Bucaramanga", "Cúcuta", "Valledupar")) %>%
  group_by(campus, est_civ) %>%
  summarise(n = n(), .groups = "drop")

# 2. Datos combinados para "Todos"
todos <- datos %>%
  filter(!is.na(est_civ)) %>%
  group_by(est_civ) %>%
  summarise(n = n(), .groups = "drop") %>%
  mutate(campus = "Todos")

# 3. Combinar todos los campus
datos_final <- bind_rows(datos_plot, todos)

# 4. Crear gráfico con filtro interactivo sin agujero
fig <- plot_ly(type = 'pie')  # SIN `hole = 0.3`

# Campus disponibles
campus_niveles <- unique(datos_final$campus)

# Añadir una traza por campus
for (i in seq_along(campus_niveles)) {
  datos_c <- datos_final %>% filter(campus == campus_niveles[i])
  fig <- fig %>% add_trace(
    labels = datos_c$est_civ,
    values = datos_c$n,
    name = campus_niveles[i],
    visible = ifelse(i == 1, TRUE, FALSE),  # Solo visible el primero
    type = "pie",
    textinfo = "percent+label",
    sort = FALSE,
    direction = "clockwise",
    rotation = 90
  )
}

# 5. Filtro interactivo (dropdown)
fig <- fig %>% layout(
  title = "Distribución del estado civil por campus",
  showlegend = TRUE,
  updatemenus = list(list(
    active = 0,
    type = "dropdown",
    buttons = lapply(seq_along(campus_niveles), function(i) {
      list(
        method = "restyle",
        args = list("visible", as.list(seq_along(campus_niveles) == i)),
        label = campus_niveles[i]
      )
    })
  ))
)

fig

```

```{r}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos (campus y estado civil)
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(est_civ), campus %in% c("Bucaramanga", "Cúcuta", "Valledupar")) %>%
  group_by(campus, est_civ) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar "Todos"
todos <- datos %>%
  filter(!is.na(est_civ)) %>%
  count(est_civ, name = "n") %>%
  mutate(campus = "Todos")

# 3. Unir todos
datos_final <- bind_rows(datos_plot, todos)

# 4. Lista de campus
niveles_campus <- unique(datos_final$campus)

# 5. Paleta pastel (tantos colores como categorías de estado civil)
colores_pastel <- brewer.pal(n = max(3, length(unique(datos_final$est_civ))), name = "Pastel1")

# 6. Crear gráfico base con todas las trazas invisibles excepto la inicial
fig <- plot_ly(type = "pie")

for (i in seq_along(niveles_campus)) {
  datos_c <- datos_final %>% filter(campus == niveles_campus[i])
  
  fig <- fig %>% add_trace(
    labels = datos_c$est_civ,
    values = datos_c$n,
    type = "pie",
    name = niveles_campus[i],
    visible = ifelse(i == 1, TRUE, FALSE),
    textinfo = "label+percent",
    hoverinfo = "label+percent+value",
    sort = FALSE,
    marker = list(colors = colores_pastel),
    direction = "clockwise",
    rotation = 90
  )
}

# 7. Layout con menú desplegable
fig <- fig %>% layout(
  title = "Distribución del estado civil por campus",
  showlegend = TRUE,
  updatemenus = list(list(
    type = "dropdown",
    direction = "down",
    x = 0.1, y = 1.2,
    buttons = lapply(seq_along(niveles_campus), function(i) {
      visibilidad <- rep(FALSE, length(niveles_campus))
      visibilidad[i] <- TRUE
      list(method = "restyle",
           args = list("visible", visibilidad),
           label = niveles_campus[i])
    })
  ))
)

fig

```

```{r}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos (campus y sexo)
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(sexo_id), campus %in% c("Bucaramanga", "Cúcuta", "Valledupar")) %>%
  group_by(campus, sexo_id) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar "Todos"
todos <- datos %>%
  filter(!is.na(sexo_id)) %>%
  count(sexo_id, name = "n") %>%
  mutate(campus = "Todos")

# 3. Unir todos
datos_final <- bind_rows(datos_plot, todos)

# 4. Lista de campus
niveles_campus <- unique(datos_final$campus)

# 5. Paleta pastel (tantos colores como categorías de estado civil)
colores_pastel <- brewer.pal(n = max(3, length(unique(datos_final$est_civ))), name = "Pastel1")

# 6. Crear gráfico base con todas las trazas invisibles excepto la inicial
fig <- plot_ly(type = "pie")

for (i in seq_along(niveles_campus)) {
  datos_c <- datos_final %>% filter(campus == niveles_campus[i])
  
  fig <- fig %>% add_trace(
    labels = datos_c$sexo_id,
    values = datos_c$n,
    type = "pie",
    name = niveles_campus[i],
    visible = ifelse(i == 1, TRUE, FALSE),
    textinfo = "label+percent",
    hoverinfo = "label+percent+value",
    sort = FALSE,
    marker = list(colors = colores_pastel),
    direction = "clockwise",
    rotation = 90
  )
}

# 7. Layout con menú desplegable
fig <- fig %>% layout(
  title = "Distribución del sexo por campus",
  showlegend = TRUE,
  updatemenus = list(list(
    type = "dropdown",
    direction = "down",
    x = 0.1, y = 1.2,
    buttons = lapply(seq_along(niveles_campus), function(i) {
      visibilidad <- rep(FALSE, length(niveles_campus))
      visibilidad[i] <- TRUE
      list(method = "restyle",
           args = list("visible", visibilidad),
           label = niveles_campus[i])
    })
  ))
)

fig

```

```{r}
library(dplyr)
library(plotly)

# 1. Preparar los datos: cuenta y porcentaje
estado_civil_df <- datos %>%
  filter(!is.na(est_civ)) %>%
  count(est_civ) %>%
  mutate(pct = round(100 * n / sum(n), 1),
         label = paste0(est_civ, ": ", pct, "%"))

# 2. Gráfico de pastel interactivo
plot_ly(
  data = estado_civil_df,
  labels = ~est_civ,
  values = ~pct,
  type = 'pie',
  textinfo = 'label+percent',
  hoverinfo = 'text',
  text = ~label,
  marker = list(colors = RColorBrewer::brewer.pal(n = max(3, nrow(estado_civil_df)), name = "Pastel1"))
) %>%
  layout(
    title = "Estado civil de los estudiantes",
    showlegend = TRUE
  )

```

```{r}
library(dplyr)
library(plotly)

# 1. Agrupar por campus y estado civil
estado_civil_df <- datos %>%
  filter(!is.na(campus), !is.na(est_civ)) %>%
  count(campus, est_civ, name = "n") %>%
  group_by(campus) %>%
  mutate(pct = round(100 * n / sum(n), 1)) %>%
  ungroup()

# 2. Agregar una categoría "Todos"
todos_df <- datos %>%
  filter(!is.na(est_civ)) %>%
  count(est_civ, name = "n") %>%
  mutate(campus = "Todos",
         pct = round(100 * n / sum(n), 1))

# 3. Combinar ambas
estado_civil_full <- bind_rows(estado_civil_df, todos_df)

# 4. Crear gráfico interactivo
plot_ly(
  data = estado_civil_full %>% filter(campus == "Todos"),
  labels = ~est_civ,
  values = ~pct,
  type = 'pie',
  textinfo = 'label+percent',
  insidetextorientation = 'radial',
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución de estado civil por campus",
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(unique(estado_civil_full$campus), function(c) {
          list(
            method = "restyle",
            args = list("transforms[0].value", c),
            label = c
          )
        })
      )
    )
  )

```

```{r}
library(dplyr)
library(plotly)
library(RColorBrewer)

# 1. Preparar los datos (campus y estado civil)
datos_plot <- datos %>%
  filter(!is.na(campus), !is.na(est_civ), campus %in% c("Bucaramanga", "Cúcuta", "Valledupar")) %>%
  group_by(campus, prog_abrev) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar "Todos"
todos <- datos %>%
  filter(!is.na(prog_abrev)) %>%
  count(est_civ, name = "n") %>%
  mutate(campus = "Todos")

# 3. Unir todos
datos_final <- bind_rows(datos_plot, todos)

# 4. Lista de campus
niveles_campus <- unique(datos_final$campus)


plot_ly(data=datos, x = ~campus, y = ~edad, color = ~campus, type = "box")
```

```{r}
library(plotly)
plot_ly(data=datos, x = ~ prog_abrev, y = ~edad, color = ~prog_abrev, type = "box")

showlegend = FALSE  # 👈 Asegurar que se oculte la leyenda general

# Convertir columnas de texto a UTF-8
datos <- datos %>%
  mutate(across(where(is.character), ~ iconv(., from = "", to = "UTF-8")))

datos <- datos %>%
  mutate(across(where(is.character), ~ iconv(., from = "", to = "UTF-8", sub = "")))

# Buscar caracteres no válidos en 'programa'
problemas <- datos %>%
  filter(!is.na(prog_abrev)) %>%
  filter(is.na(iconv(prog_abrev, from = "", to = "UTF-8")))

print(problemas$prog_abrev)

```

```{r}
library(dplyr)
library(plotly)

# Asegurar codificación UTF-8
datos <- datos %>%
  mutate(across(where(is.character), ~ iconv(., from = "", to = "UTF-8", sub = "")))

# Agregar opción "Todos"
datos_todos <- datos %>%
  filter(!is.na(prog_abrev), !is.na(edad)) %>%
  mutate(campus = "Todos")

datos_final <- bind_rows(datos, datos_todos)

# Niveles de campus
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# Crear gráfico base con todas las trazas (una por campus)
fig <- plot_ly()

for (i in seq_along(niveles_campus)) {
  datos_c <- datos_final %>% filter(campus == niveles_campus[i])
  
  fig <- fig %>%
    add_boxplot(
      data = datos_c,
      x = ~prog_abrev,
      y = ~edad,
      name = niveles_campus[i],
      visible = ifelse(i == 1, TRUE, FALSE),  # Solo la primera visible
      boxpoints = "outliers",
      marker = list(color = "#6BAED6"),
      line = list(color = "#2171B5")
    )
}

# Layout con menú desplegable para filtrar por campus
fig <- fig %>%
  layout(
    title = "Distribución de edad por programa y campus",
    yaxis = list(title = "Edad"),
    xaxis = list(title = "Programa", tickangle = -45),
    showlegend = FALSE,
    updatemenus = list(
      list(
        type = "dropdown",
        direction = "down",
        x = 0.1,
        y = 1.2,
        buttons = lapply(seq_along(niveles_campus), function(i) {
          visibilidad <- rep(FALSE, length(niveles_campus))
          visibilidad[i] <- TRUE
          list(
            method = "restyle",
            args = list("visible", visibilidad),
            label = niveles_campus[i]
          )
        })
      )
    )
  )

fig

```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y ¿Quién cubre sus gastos de matrícula?
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(gastos_mat) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, gastos_mat) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(gastos_mat)) %>%
  count(gastos_mat, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Ordenar niveles de 'gastos_mat' por frecuencia total (grupo "Todos")
niveles_din_trans <- datos_final %>%
  filter(campus == "Todos") %>%
  arrange(desc(n)) %>%
  pull(gastos_mat)

datos_final <- datos_final %>%
  mutate(gastos_mat = factor(gastos_mat, levels = niveles_din_trans))

# 6. Calcular porcentajes por campus
datos_final <- datos_final %>%
  group_by(campus) %>%
  mutate(
    total_campus = sum(n),
    porcentaje = round((n / total_campus) * 100, 1)
  ) %>%
  ungroup()

# 7. Crear texto personalizado para el hover
datos_final <- datos_final %>%
  mutate(
    hover_text = paste0(
      "<b>", gastos_mat, "</b><br>",
      "Campus: ", campus, "<br>",
      "Frecuencia: ", n, "<br>",
      "Porcentaje: ", porcentaje, "%<br>",
      "<extra></extra>"
    )
  )

# 8. Crear gráfico de barras en celeste con filtro y tooltips personalizados
fig <- plot_ly(
  data = datos_final,
  x = ~gastos_mat,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  hovertemplate = ~hover_text,
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución gastos de matrícular \n por campus",
    xaxis = list(title = "Quién cubre los gastos de matrícula"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig


```

```{r, message=FALSE, warning=FALSE, include=TRUE, echo=FALSE}
library(dplyr)
library(plotly)

# 1. Preparar los datos por campus y dinero en transporte
datos_plot <- datos %>%
  filter(!is.na(campus) & !is.na(din_trans) & campus %in% c("Bucaramanga", "Cucuta", "Valledupar")) %>%
  group_by(campus, din_trans) %>%
  summarise(n = n(), .groups = "drop")

# 2. Agregar grupo "Todos"
todos <- datos %>%
  filter(!is.na(din_trans)) %>%
  count(din_trans, name = "n") %>%
  mutate(campus = "Todos")

# 3. Fijar niveles de campus (con "Todos" primero)
niveles_campus <- c("Todos", "Bucaramanga", "Cucuta", "Valledupar")

# 4. Unir todos los datos
datos_final <- bind_rows(datos_plot, todos) %>%
  mutate(campus = factor(campus, levels = niveles_campus))

# 5. Crear gráfico de barras en celeste con filtro
fig <- plot_ly(
  data = datos_final,
  x = ~din_trans,
  y = ~n,
  type = "bar",
  marker = list(color = "#a6cee3"),
  transforms = list(
    list(
      type = 'filter',
      target = ~campus,
      operation = '=',
      value = "Todos"
    )
  )
) %>%
  layout(
    title = "Distribución del gasto semanal en transporte por campus",
    xaxis = list(title = "Gasto en transporte"),
    yaxis = list(title = "Número de estudiantes"),
    updatemenus = list(
      list(
        type = 'dropdown',
        active = 0,
        buttons = lapply(niveles_campus, function(c) {
          list(method = "restyle",
               args = list("transforms[0].value", c),
               label = c)
        })
      )
    )
  )

fig


```
